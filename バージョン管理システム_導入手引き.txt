----------------------------------------------------------------------------------------------------
バージョン管理システム　導入手引き
----------------------------------------------------------------------------------------------------

【はじめに】

バージョン管理システムって何？という人のとっかかりを作るための文書です。

更に詳しく知りたい人は、Google先生に聞くか後述の参考記事を読んでください。
なお、導入としては以下の文書がシンプルでわかりやすくおすすめです。
本文書の説明で納得いかない場合は、まず参照してみてください。

1.1 使い始める - バージョン管理に関して
http://git-scm.com/book/ja/%E4%BD%BF%E3%81%84%E5%A7%8B%E3%82%81%E3%82%8B-%E3%83%90%E3%83%BC%E3%82%B8%E3%83%A7%E3%83%B3%E7%AE%A1%E7%90%86%E3%81%AB%E9%96%A2%E3%81%97%E3%81%A6


バージョン管理システムは便利で誰にでもオススメできるものなのですが、
扱われる概念や用語が情報技術をベースとしているうえ、
複数のパラダイムや（各システム固有の）方言のようなものが混在しており、
初学者にとって理解しづらい面も少なからずあります。

本文書をざっと読むことで、それら共通の用語や概念を簡単に把握できることを目指します。


【バージョン管理システムとは】

バージョン管理システム（VCS）とは、
「ファイルの変更履歴を管理することで」「複数人での作業の効率や安全性を高める」システムです。
ここでいうファイルとはコンピュータ上で扱うデータのまとまりのことを指します。

主にソフトウェア開発の現場で、ソースコードの管理などに用いられていますが、
文書・画像・プロジェクトファイルなど、様々なデータ形式、様々な目的に対して効果を発揮します。
また、個人の作業でも便利に使えます。

バージョン管理システムを使うと何が嬉しいかというと、

　・上書き保存してしまったファイルの内容を履歴から復元したり
　・複数人で同時に１つのファイルを安全に編集できるようになったり
　・同時進行しづらい作業を別々に行い、後から合流したり

といったようなことが出来るようになることです。


【事例】

イシューを掴むため、バージョン管理システムが効果を発揮するシーンについて
ティピカルなストーリーを考えてみます（上記の説明で想像がつく人は飛ばしてOK）

<case: 復元 - revert>

朝比奈さんはイベント企画の告知ポスターを編集していました。
ほぼ完成していましたが、ある時、よりキャッチーなフレーズを思いついたので差し替えました。
が、上司の東豪寺さんに見せたところ、ボツ。以前のものに戻しなさいと言われました。

せっかくの案がボツなのは残念ですが、実際問題、元に戻すにはどうすればいいでしょう？

　A) 朝比奈さんは慎重な性格なので、元の状態のバックアップをとってあった
　B) バージョン管理システムを使っているので、revertコマンドで一発復元
　C) 現実は非情である。元の内容を思い出しながら作り直そう…

なるべくならCの方法は避けたいものです。


<case: 競合 - conflict>

朝比奈さんと三条さんは２人で協力して同人誌の原稿を作成中です。
原稿のドキュメントファイルはファイルサーバーに置き、随時更新していく方法をとっています。

ある時、朝比奈さんは、主人公のセリフのより官能的な言い回しを思いつきました。
それとほぼ同時刻、三条さんは細かい誤字を発見したので修正にとりかかりました。
間の悪いことに、朝比奈さんの更新の直後、三条さんの更新が行われてしまい、
朝比奈さんの官能的インスピレーションはファイル上から消え失せてしまいました。

この悲劇を反省してみましょう。

　A) お互い連絡を密にして、更新するときに一声かければよかった
　B) ファイルサーバー上のファイルを直接編集したり即更新をかけるべきではなかった
　C) 起きてしまったものは仕方ない。バックアップと照らし合わせて修正しなおそう

バージョン管理システムではA～Cのようなことがシステマティックに行えます。


【基本概念】

最も重要な2つの用語。

[リポジトリ (repository)]
　ファイルの更新状態や履歴を格納するデータベース

[コミット (commit)]
　ファイルの変更をリポジトリに登録する（書き込む）処理

イメージを重視するならば、

・リポジトリ　→　ファイルサーバのファイルやディレクトリ
・コミット　　→　ファイルサーバにアップロードすること

と言い換えると理解しやすいかもしれません。もちろん正確ではありませんが。

コミットする前、ローカルにあるファイルやディレクトリは、
「作業コピー (working copy)」などと表現されたりします。
つまり、リポジトリ上にあるデータが本体であると考え、
　・作業するときは、リポジトリからコピーした作業用データを編集
　・ローカルでは自由にファイル保存（リポジトリとは無関係）
　・ある程度区切りがついたらコミットして本体に反映
という流れが基本になります。


補足的用語。

[ローカルとリモート]
　ローカル = こちら、リモート = あちら。
　複数のコンピュータが何らかの形で接続し、連携可能なシステムをネットワークといいますが、
　そのネットワーク内で相対的に「手元」にあたるコンピュータを「ローカル」
　手元じゃない、ネットワークの向こう側を「リモート」と表現します。

[クライアントとサーバ]
　サービス（機能）を提供するものをサーバと呼び、そのサービスの受け手をクライアントといいます。
　多くの場合、ローカルがクライアントで、リモートがサーバという構図になりますが、
　ローカル - リモートはネットワーク内の位置関係を示す概念に対し、
　クライアント - サーバ (C/Sと書いたりする）は、サービスに対する立場を示す概念になります。
　例えば、1つのローカル内で、クライアントとサーバーが動いてることもよくあります。


【バージョン管理システムの種類】

バージョン管理を実現するソフトウェアはたくさんありますが、
歴史的経緯や考え方、方式の違いから大きく３つの種類にわけられます。
３つの世代といってもよいかもしれません。

(1) ローカル型　（代表例: RCS）
　黎明期に開発された方式で、ローカルストレージのファイルの履歴を管理します。
　筆者は使ったことないのでよくしりません。

(2) C/S型 　　　（代表例: CVS、VSS、Subversion）
　いわゆる従来型の方式で、
　「サーバにある共有リポジトリからクライアントに作業コピーを作成し、作業する」
　と、いわゆるファイル共有の基本的な考え方をとっています。

(3) 分散型　　　（代表例：Git、Mercurial）
　最近主流になりつつある方式で、
　「中央リポジトリのほかに、ローカルにもリポジトリを作成する」
　という方法をとります。

　有名なGitHubは、分散型VCSであるGitのホスティングサービスです。


【分散型バージョン管理システム】



【参考文献】

真面目に読んでいないのでわかりやすいかどうかは謎。

サルでもわかるGit入門　はじめに
http://www.backlog.jp/git-guide/intro/intro1_1.html

SubversionとTracでファイル管理の“迷宮”から脱出 
http://www.atmarkit.co.jp/ait/articles/0811/06/news147.html

分散バージョン管理Git/Mercurial/Bazaar徹底比較 
http://www.atmarkit.co.jp/ait/articles/0901/14/news133.html
